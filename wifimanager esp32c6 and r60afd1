#include "esphome.h"
#include <WiFi.h>
#include <WiFiManager.h> // WiFiManager for handling Wi-Fi

// Wi-Fi reset button pin
#define WIFI_RESET_PIN 0 // GPIO0 for Wi-Fi reset button

class UARTSensor {
public:
  UARTSensor(HardwareSerial &serial) : serial_(serial) {}

  void setup() {
    // Initialize serial communication
    serial_.begin(115200);
    Serial.begin(115200);

    // Setup Wi-Fi
    setupWiFi();

    // Query residence switch with an initial value (if necessary)
    queryResidenceSwitch(1);
  }

  void loop() {
    while (serial_.available()) {
      bytes.push_back(serial_.read());

      // End of Frame is 0x54 0x43
      if (bytes.size() >= 2 && bytes[bytes.size() - 2] == 0x54 && bytes[bytes.size() - 1] == 0x43) {
        processPacket();
        bytes.clear();
      }
    }
  }

private:
  HardwareSerial &serial_;
  std::vector<int> bytes;

  void setupWiFi() {
    delay(1000);
    Serial.println("Starting Wi-Fi setup...");

    pinMode(WIFI_RESET_PIN, INPUT_PULLUP);

    WiFiManager wm;

    // Check if Wi-Fi reset button is pressed
    if (digitalRead(WIFI_RESET_PIN) == LOW) {
      Serial.println("Wi-Fi reset button pressed. Resetting Wi-Fi settings...");
      wm.resetSettings();
      delay(1000);
    }

    // Attempt to auto-connect
    if (!wm.autoConnect("XIAO_ESP32C6_AP")) {
      Serial.println("Failed to connect to Wi-Fi. Starting AP mode...");
      wm.startConfigPortal("XIAO_ESP32C6_AP");
    }

    Serial.println("Wi-Fi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  }

  void processPacket() {
    // Decode the packet data and log information
    if (bytes.size() < 7) return;

    // Example: Presence information
    if (bytes[0] == 0x53 && bytes[1] == 0x59 && bytes[2] == 0x80 && bytes[3] == 0x01) {
      int presence_sensor_value = int(bytes[6]);
      Serial.print("Presence detected: ");
      Serial.println(presence_sensor_value);
    }

    // Additional decoding logic for other packet types can be added here
  }

  // Function to query residence switch
  void queryResidenceSwitch(int value) {
    if (value < 0 || value > 3) return;

    int sum = (0x53 + 0x59 + 0x83 + 0x8B + 0x00 + 0x01 + value) & 0xFF;

    serial_.write((uint8_t)0x53);
    serial_.write((uint8_t)0x59);
    serial_.write((uint8_t)0x83);
    serial_.write((uint8_t)0x8B);
    serial_.write((uint8_t)0x00);
    serial_.write((uint8_t)0x01);
    serial_.write((uint8_t)value);
    serial_.write((uint8_t)sum);
    serial_.write((uint8_t)0x54);
    serial_.write((uint8_t)0x43);
  }
};

// Instantiate the sensor class
UARTSensor sensor(Serial1);

void setup() {
  sensor.setup();
}

void loop() {
  sensor.loop();
}
